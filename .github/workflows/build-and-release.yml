name: Build, Package and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a release with binaries'
        type: boolean
        default: false
      release_version:
        description: 'Version for the release (e.g., v1.0.0)'
        type: string
        required: false
env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_PATH: 'HadesMatrixBridge/HadesMatrixBridge.csproj'
  SOLUTION_PATH: 'HadesMatrixBridge.sln'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERFILE_PATH: 'HadesMatrixBridge/Dockerfile'  # Updated to point to the correct Dockerfile location

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    # Set version variables
    - name: Set version variables
      id: set_version
      run: |
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.release_version }}" != "" ]]; then
          # Use manual input version (remove 'v' prefix if present)
          VERSION="${{ github.event.inputs.release_version }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        else
          # Use a default version with build number for non-release builds
          VERSION="1.0.0-dev.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=1.0.0.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=1.0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION+sha.${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: $VERSION"

    - name: Build
      run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore -p:Version=${{ steps.set_version.outputs.VERSION }} -p:AssemblyVersion=${{ steps.set_version.outputs.ASSEMBLY_VERSION }} -p:FileVersion=${{ steps.set_version.outputs.FILE_VERSION }} -p:InformationalVersion=${{ steps.set_version.outputs.INFORMATIONAL_VERSION }}
    
    - name: Test
      run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-build --verbosity normal

  create-binaries:
    name: Create Binaries
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_PATH }}
    
    # Set version variables
    - name: Set version variables
      id: set_version
      run: |
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.release_version }}" != "" ]]; then
          # Use manual input version (remove 'v' prefix if present)
          VERSION="${{ github.event.inputs.release_version }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        else
          # Use a default version with build number for non-release builds
          VERSION="1.0.0-dev.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=1.0.0.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=1.0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION+sha.${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: $VERSION"
    
    # Build Linux x64 binary
    - name: Build Linux x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:Version=${{ steps.set_version.outputs.VERSION }} -p:AssemblyVersion=${{ steps.set_version.outputs.ASSEMBLY_VERSION }} -p:FileVersion=${{ steps.set_version.outputs.FILE_VERSION }} -p:InformationalVersion=${{ steps.set_version.outputs.INFORMATIONAL_VERSION }} -o ./publish/linux-x64
    
    # Build Windows x64 binary
    - name: Build Windows x64
      run: dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:Version=${{ steps.set_version.outputs.VERSION }} -p:AssemblyVersion=${{ steps.set_version.outputs.ASSEMBLY_VERSION }} -p:FileVersion=${{ steps.set_version.outputs.FILE_VERSION }} -p:InformationalVersion=${{ steps.set_version.outputs.INFORMATIONAL_VERSION }} -o ./publish/win-x64
    
    # Create zip archives
    - name: Create archives
      run: |
        cd ./publish/linux-x64
        zip -r ../../HadesMatrixBridge-linux-x64.zip .
        cd ../win-x64
        zip -r ../../HadesMatrixBridge-win-x64.zip .
        cd ../..
    
    # Upload artifacts
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: hades-matrix-bridge-linux-x64
        path: HadesMatrixBridge-linux-x64.zip
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: hades-matrix-bridge-win-x64
        path: HadesMatrixBridge-win-x64.zip
    
    # Create GitHub Release if this is a tag or manual release is requested
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.create_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          HadesMatrixBridge-linux-x64.zip
          HadesMatrixBridge-win-x64.zip
        draft: false
        prerelease: false
        name: ${{ github.event.inputs.release_version || github.ref_name }}
        tag_name: ${{ github.event.inputs.release_version || github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Set version variables
    - name: Set version variables
      id: set_version
      run: |
        if [[ "${{ startsWith(github.ref, 'refs/tags/v') }}" == "true" ]]; then
          # Extract version from tag (remove 'v' prefix)
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.release_version }}" != "" ]]; then
          # Use manual input version (remove 'v' prefix if present)
          VERSION="${{ github.event.inputs.release_version }}"
          VERSION="${VERSION#v}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=$VERSION.0" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION" >> $GITHUB_OUTPUT
        else
          # Use a default version with build number for non-release builds
          VERSION="1.0.0-dev.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "ASSEMBLY_VERSION=1.0.0.0" >> $GITHUB_OUTPUT
          echo "FILE_VERSION=1.0.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "INFORMATIONAL_VERSION=$VERSION+sha.${{ github.sha }}" >> $GITHUB_OUTPUT
        fi
        echo "Using version: $VERSION"
    
    # Determine if this is a release build
    - name: Set release flag
      id: release_flag
      run: |
        if [[ "${{ startsWith(github.ref, 'refs/tags/') }}" == "true" || "${{ github.event.inputs.create_release }}" == "true" ]]; then
          echo "is_release=true" >> $GITHUB_OUTPUT
        else
          echo "is_release=false" >> $GITHUB_OUTPUT
        fi
    # Extract metadata (tags, labels) for Docker
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Standard tags
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha
          # Add 'latest' tag for releases
          ${{ steps.release_flag.outputs.is_release == 'true' && 'type=raw,value=latest' || '' }}
          # Add custom version tag for manual releases
          ${{ github.event.inputs.release_version != '' && format('type=raw,value={0}', github.event.inputs.release_version) || '' }}
          # Add 'dev' tag for non-release builds on main branch
          ${{ github.ref == 'refs/heads/master' && steps.release_flag.outputs.is_release != 'true' && 'type=raw,value=dev' || '' }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ steps.set_version.outputs.VERSION }}
          ASSEMBLY_VERSION=${{ steps.set_version.outputs.ASSEMBLY_VERSION }}
          FILE_VERSION=${{ steps.set_version.outputs.FILE_VERSION }}
          INFORMATIONAL_VERSION=${{ steps.set_version.outputs.INFORMATIONAL_VERSION }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
